---
- name: "Load os-specific variables"
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"

- name: "Install PostgreSQL"
  apt:
    pkg: "{{ item }}"
    state: "present"
  with_items:
    - "postgresql"
    - "libpq-dev"

- name: "Install psycopg2 for Python3"
  apt:
    pkg: "python3-psycopg2"
  when: ansible_python_version is version_compare('3', '>=')

- name: "Install psycopg2 for Python2"
  apt:
    pkg: "python-psycopg2"
  when: ansible_python_version is version_compare('3', '<')

- name: "Configure access control"
  template:
    src: "pg_hba.conf"
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
  notify: "postgresql_restart"

- name: "Configure network listener"
  lineinfile:
    path: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "listen_addresses"
    line: "listen_addresses = '{{ postgresql_listen_addresses }}'     # what IP address(es) to listen on;"
  when: postgresql_listen_addresses is defined
  notify: "postgresql_restart"

- name: "Configure the firewall (postgres)"
  ufw:
    rule: "allow"
    port: "postgres"
  when: postgresql_listen_addresses is defined and postgresql_listen_addresses != 'localhost'

- name: "Ensure Super User Account"
  become: "yes"
  become_user: "postgres"
  postgresql_user:
    name: "{{ ansible_user|default(lookup('env', 'USER'), True) }}"
    state: "present"
    role_attr_flags: "LOGIN,SUPERUSER"

- name: "Create database for Super User account"
  become: "yes"
  become_user: "postgres"
  postgresql_db:
    name: "{{ ansible_user|default(lookup('env', 'USER'), True) }}"
    state: "present"
    owner: "{{ ansible_user|default(lookup('env', 'USER'), True) }}"
...
